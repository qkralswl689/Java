package sec07.exam03_chatting;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetSocketAddress;
import java.net.Socket;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ClientExample extends Application {
	// 통신과 관련된 필드
	Socket socket;
	
	void startClient() { // 연결 시작 코드
		
		// 서버에 연결되기 전까지 대기상태로 있기위해 별도의 Thread생성 => 익명객체로 생성
		Thread thread = new Thread() {
			@Override
			public void run() {
				try {
					// socket 객체 생성
					socket = new Socket();
					
					// 연결				
					socket.connect(new InetSocketAddress("localhost", 5001));
					
					// 로그 출력
					Platform.runLater(()->{
						displayText("[연결 완료: " + socket.getRemoteSocketAddress() + "]");
						btnConn.setText("stop"); // start버튼 stop로 변경
						btnSend.setDisable(false); // send버튼 활성화
					});
				} catch (IOException e) { 
					Platform.runLater(()->displayText("[서버 통신 안됨]"));
					if(!socket.isClosed()) {
						stopClient();
					}return;
					
					}
				// 연결 성공시 => receive 메소드를 받아 항상 서버가 보내는 데이터를 받는다
					receive();
				}
			};		
			thread.start(); // thread 시작
	}
	
	void stopClient() { // 연결 끊기 코드
		try {
		Platform.runLater(()->{displayText("[연결 끊음]");
		btnConn.setText("start"); // stop버튼 start로 변경
		btnSend.setDisable(true); // send버튼 비활성화	
		});
		if(socket !=null && !socket.isClosed()) {
			socket.close();
		}
		}catch(Exception e) {}
	}
	
	void receive() { // 데이터 받기 코드
		while(true) {
			try {
			byte[] byteArr = new byte[100];
			InputStream inputStream = socket.getInputStream();
			
			int readByteCount = inputStream.read(byteArr);
			
			if(readByteCount == -1) { // 클라이언트가 정상적으로 종료를 했다면
				throw new IOException(); // 강제적으로 IO예외를 발생
			}
			
			// 읽은 바이트 문자열로 변환
			String data = new String(byteArr,0,readByteCount,"UTF-8");
			
			// 로그 출력
			Platform.runLater(()-> displayText("[받기 완료]" + data));
			
			} catch(Exception e) {
				Platform.runLater(()-> displayText("[서버 통신 안됨]"));
				
				stopClient();
				break; // while문 빠져나가기
			}

		}
		
	}
	
	void send(String data) { // 데이터 전송 코드
		
		// 별도의 스레드 만들어 데이터 보내기
		
		Thread thread = new Thread() {
			@Override
			public void run() {
				try {
					byte[] byteArr = data.getBytes("UTF-8");
					OutputStream outputStream = socket.getOutputStream();
					outputStream.write(byteArr);
					outputStream.flush(); // write메소드 호출후 꼭 사용해야한다
					Platform.runLater(()-> displayText("[보내기 완료]"));
				} catch (Exception e) {
				}
			}
		};
		thread.start(); // thread 시작
	}
	
	//////////////////////////////////////////////////////
	
	// 자바 UI
	
	TextArea txtDisplay;
	TextField txtInput;
	Button btnConn, btnSend;
	
	@Override
	public void start(Stage primaryStage) throws Exception {
		BorderPane root = new BorderPane();
		root.setPrefSize(500, 300);
		
		txtDisplay = new TextArea();
		txtDisplay.setEditable(false);
		BorderPane.setMargin(txtDisplay, new Insets(0,0,2,0));
		root.setCenter(txtDisplay);
		
		BorderPane bottom = new BorderPane();
			txtInput = new TextField();
			txtInput.setPrefSize(60, 30);
			BorderPane.setMargin(txtInput, new Insets(0,1,1,1));
			
			btnConn = new Button("start");
			btnConn.setPrefSize(60, 30);
			btnConn.setOnAction(e->{
				if(btnConn.getText().equals("start")) {
					startClient();
				} else if(btnConn.getText().equals("stop")){
					stopClient();
				}
			});
			
			btnSend = new Button("send"); 
			btnSend.setPrefSize(60, 30);
			btnSend.setDisable(true);
			btnSend.setOnAction(e->send(txtInput.getText()));
			
			bottom.setCenter(txtInput);
			bottom.setLeft(btnConn);
			bottom.setRight(btnSend);
		root.setBottom(bottom);
		
		Scene scene = new Scene(root);
		scene.getStylesheets().add(getClass().getResource("app.css").toString());
		primaryStage.setScene(scene);
		primaryStage.setTitle("Client");
		primaryStage.setOnCloseRequest(event->stopClient());
		primaryStage.show();
	}
	
	void displayText(String text) {
		txtDisplay.appendText(text + "\n");
	}	
	
	public static void main(String[] args) {
		launch(args);
	}
}
