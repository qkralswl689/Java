package sec07.exam03_chatting;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import ThisJava.ServerExample.Client;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

// 클래스 선언
// Application 을 상속한다 => java fx실행클래스를 만들기 위해
public class ServerExample extends Application {
	
	// 필드 선언
	ExecutorService executorService; // 스레드풀 생성위해 선언
	ServerSocket serverSocket; // 클라이언트의 연결요청 수락하기 위해 선언
	
	// List<Client> => 아래 class Client를  객체 생성 해 List에 저장
	// Vector : 스레드에 안전하다
	List<Client> connections = new Vector<Client>(); // 
	
	void startServer() { // 서버 시작 코드
		// start 버튼 눌렀을 때 실행
		
		// 1) ExecutorService 객체 만들기
		// executorService 라고 하는 스레드 풀 걕체 생성
		executorService = Executors.newFixedThreadPool(
				// 스레드 최대갯수 입력
				// 현재 PC의 CPU가 지원하는 코어의 수를 얻을 수 있다 =>코어의 수 만큼 쓰레드 생성
				Runtime.getRuntime().availableProcessors()
			);
			try {
				// 2) ServerSocket 객체 만들어 포트에 binding 한다
				serverSocket = new ServerSocket();
				serverSocket.bind(new InetSocketAddress("localhost,5001"));
			}catch(Exception e) {
				if(!serverSocket.isClosed()) {
					stopServer();
				}
				return; // start서버 종료
				
			}	
			
			// 3) 연결 수락 작업을 스레드에서 처리할 수 있도록 Runnable객체를 만들어
			// executorService 에 submit 메소드를 제공하는 코드 작성
			
			// Runnable 객체 생성 => 연결 수락 작업 객체
			Runnable runnable = new Runnable() {
				// ctrl + space 해서 run메소드 오버라이드
				@Override
				public void run() {
					// 연결 수락을 위한 코드 작성
					
					// 첫 화면에 띄울 문구 작성
					Platform.runLater(()->{ // UI변경 코드
						displayText("[서버시작]");
						btnStartStop.setText("stop"); // start 버튼을 누루면 해당 버튼이 stop으로 바뀌는 코드
					});
					
					// 무한루프 작성 => 클라이언트에 연결 수락 작업을 계속적으로 할 수 있는 코드 작성
					while(true){
						try {	
							// 클라이언트가 연결요청하면 accept 가 연결 수락을 하고 socket 을 리턴한다
						Socket socket = serverSocket.accept();
						// 로그 출력 -> 클라이언트 IP와 , 현재 담당 스레드 풀의 이름을 출력한다
						String message = "[연결 수락 : " + socket.getRemoteSocketAddress()+ ":" 
											+ Thread.currentThread().getName(); + "]" ;
						Platform.runLater(()->{
							displayText(message);
						});
						
						// 클라이언트 연결 하나당  클라이언트 객체를 생성해서 List<Client>에 저장한다
						Client client = new Client(socket);
						
						// connections 에 클라이언트 저장
						connections.add(client);
						
						// 로그 출력 => 몊개의 클라이언트가 연결 되었는지 출력
						Platform.runLater(()->{
							displayText("[연결 개수 : " + connections.size()+ "]" );
						});
						} catch (IOException e) {
							if(!serverSocket.isClosed()) { // 만약에 서버소켓이 닫혀있지 않다면
								stopServer(); // 서버를 중지한다
							}

						}				
						
					}
				}
			};			
	}
		
			
	void stopServer() { // 서버 종료 코드
		// stop 버튼 눌렀을 때 실행
		
	}	
	
	class Client { // 데이터 통신코드 
		// 생성자 생성
		Client(Socket socket){
			
		}
	}
	
	//////////////////////////////////////////////////////
	// 자바로 UI 만드것
	TextArea txtDisplay;
	Button btnStartStop;
	
	@Override
	public void start(Stage primaryStage) throws Exception {
		BorderPane root = new BorderPane();
		root.setPrefSize(500, 300);
		
		txtDisplay = new TextArea();
		txtDisplay.setEditable(false);
		BorderPane.setMargin(txtDisplay, new Insets(0,0,2,0));
		root.setCenter(txtDisplay);
		
		btnStartStop = new Button("start");
		btnStartStop.setPrefHeight(30);
		btnStartStop.setMaxWidth(Double.MAX_VALUE);
		btnStartStop.setOnAction(e->{
			if(btnStartStop.getText().equals("start")) {
				startServer();
			} else if(btnStartStop.getText().equals("stop")){
				stopServer();
			}
		});
		root.setBottom(btnStartStop);
		
		Scene scene = new Scene(root);
		scene.getStylesheets().add(getClass().getResource("app.css").toString());
		primaryStage.setScene(scene);
		primaryStage.setTitle("Server");
		primaryStage.setOnCloseRequest(event->stopServer());
		primaryStage.show();
	}
	
	void displayText(String text) {
		txtDisplay.appendText(text + "\n");
	}	
	
	public static void main(String[] args) {
		launch(args);
	}
}
